//
//  CPFactory.m
//  Chipmunk
//
//  Created by Ronald Mathies on 12/27/10.
//  Copyright 2010 Sodeso. All rights reserved.
//

#import "CMManager.h"

// --- Static inline methods -----------------------------------------------------------------------

// --- private interface ---------------------------------------------------------------------------

@interface CMManager ()

@end

// --- Static variables ----------------------------------------------------------------------------

static CMManager *inst = nil;

// --- Class implementation ------------------------------------------------------------------------

@implementation CMManager

@synthesize space = mSpace;

- (id) init {
	self = [super init];
	if (self != nil) {
		mSpace = cpSpaceNew();
	}
	return self;
}

- (void)setGravity:(cpVect)gravity {
	mSpace->gravity = cpv(0, -100);
}

- (CMBody*)createBody {
	return [self createBody:INFINITY moment:INFINITY];
}

- (CMBody*)createBodyWithMass:(float)mass moment:(float)moment {
	CMBody *body = [[CMBody alloc] initWithMass:mass moment:moment];
	return body; 
}

#pragma mark Singleton methods

+ (CMManager*)inst{
    @synchronized(self) {
        if (inst == nil) {
			inst = [[CMManager alloc] init];
		}
    }
	
    return inst;
}

+ (id)allocWithZone:(NSZone *)zone {
    @synchronized(self) {
        if (inst == nil) {
            inst = [super allocWithZone:zone];
			
			// assignment and return on first allocation
            return inst;  
        }
    }
	
	// on subsequent allocation attempts return nil
    return nil;
}

- (id)copyWithZone:(NSZone *)zone {
    return self;
}

- (id)retain {
    return self;
}

- (unsigned)retainCount {
	// denotes an object that cannot be released
    return UINT_MAX;
}

- (void)release {
	//do nothing
}

- (id)autorelease {
    return self;
}

#pragma mark -
@end
